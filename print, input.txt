1. Функция print
Функция print является встроенной функцией языка python, которая позволяет вывести в консоль переданные ей значения.
между значениями, переданными в функцию print, в консоли при выводе всегда по умолчанию ставится один знак пробела. В конце своей работы print 
обязательно делает перенос на новую строчку.
Такое поведение зависит от параметров функции print, и его можно изменить, передав другие значения.

Параметры функции print

print(value, ..., sep=' ', end='\n')

Параметр sep
отвечает за то, что будет выводиться между значениями в пределах одной команды print. По умолчанию разделитель равен пробелу, вот почему все 
значения в одном принте печатаются через пробел. Но мы можем заменить разделитель другим значением. Для этого нужно в самом конце вызова функции 
print, после того как вы указали все значения для вывода, написать имя параметра и через присваивание передать в него новое значение в виде строки.

print(значение1, значение2, ...,значениеN, sep=новый_разделитель)

print(1, 2, 3, 4, sep=' ')
print(1, 2, 3, 4, 5, sep='')
print(1, 2, 3, 4, 5, 6, sep=',')
print(1, 2, 3, 4, 5, 6, 7, sep='*')

Параметр end
Параметр end  отвечает за то, что будет печататься после вывода всех значений в пределах одной команды print. По умолчанию после вывода 
всех значений print делает перенос на новую строчку, поскольку принимает изначально значение \n.

Два следующих вызова функции print

print(1, 2, 3)
print(1, 2, 3, end='\n')
являются равнозначными, но во втором примере значение для параметра end передается в явном виде.

Если вы хотите добавить дополнительный перенос строки или отменить его вовсе, заменив любым символом, просто присвойте end новое значение 
в виде строки. 

print(1, 2, end='-->>')
print(3, 4)
print(5, 6, 7, end='-->>>\n')
print(8, 9)

Можно одновременно пользоваться атрибутами sep и end . Задавать им значения можно в любом порядке, главное прописать имя параметра 
и присвоить значение.

print(1, 2, 3, sep='!', end='?')
print('Мир', 'Ни хао')
print(5, 6, 7, 8, 9, end='END', sep='@')
print('!')


2. Функция input().
Главной особенностью функции input является то, что она получает все введенные данные в качестве текста. 
Следовательно, все, что вы введете, сохранится в переменной как строка

Функция input позволяет получить информацию, которую пользователь вводит с клавиатуры.

имя_переменной = input()

print('Бу, испугался? Не бойся! Я друг')
print('Скажи, как тебя зовут?')
name = input()
print('Рад познакомиться, ', name)

Подсказка ввода

У функции input есть необязательный параметр prompt – это подсказка пользователю перед вводом. 
При помощи нее вы можете сообщить пользователю, что от него требуется, ведь наши пользователи не ясновидящие, они не понимают, что нужно вводить.
 Вот смотрите, как выглядит программа без подсказок

a = int(input())
b = int(input())
print("Произведение чисел", a, b, "равно", a * b)

А вот уже программа с подсказками

a = int(input('Введите первое число: '))
b = int(input('Введите второе число: '))
print("Произведение чисел", a, b, "равно", a * b)

Остановка в программе
Функцию input() можно использовать для остановки программы. Пауза будет длиться до тех пор, пока пользователь не нажмет клавишу «Enter». 
Сам введенный текст при этом не будет нигде сохранен.

Вот взгляните на программу ниже. В ней используются 3 вызова функции input: два из них с подсказкой, один - без. 
Все они заставляют замереть программу до тех пор, пока пользователь не нажмет «Enter». Нажатие всех остальных клавиш игнорируются.

print('Привет')
input('Пауза № 1, нажми Enter и увидишь следующий print')
print('Меня зовут Артём')
input()
print('Нравится курс?')
input('Пауза № 3')
print('Для чего изучаешь Python? Делись в комментариях')




































