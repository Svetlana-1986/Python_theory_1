# Задана целочисленная матрица, состоящая из N строк и M столбцов. Необходимо
# обойти элементы этой матрицы cправа налево сверху вниз и вывести элементы именно
# в таком порядке в виде таблицы.
#
# Программа принимает на вход два натуральных числа N и M – количество строк и столбцов матрицы.
# В каждой из последующих N строк записаны M целых чисел – элементы матрицы.

# Sample Input 1:
#
# 3 4
# 5 9 2 6
# 6 2 4 3
# 1 2 8 7
#
# Sample Output 1:
#
# 6 2 9 5
# 3 4 2 6
# 7 8 2 1

a = []
n, m = map(int, input().split())  # n-строка, m - столбец

for i in range(n):
    a.append(list(map(int, input().split())))  # заполняем таблицу элементами

for i in range(n):  # обход строки
    for j in range(m - 1, -1, -1):  # обход столбцов итой строки
        print(a[i][j], end=' ')  # печать символа через пробел
    print()  # пустой принт переход на новую строку

# Задана целочисленная матрица, состоящая из N строк и M столбцов. Необходимо обойти элементы этой
# # матрицы слева направо
# # снизу вверх и вывести элементы именно в таком порядке в виде таблицы.
# #
# # Программа принимает на вход два натуральных числа N и M – количество строк и столбцов матрицы.
# # В каждой из последующих N строк записаны M целых чисел – элементы матрицы.

# Sample Input 1:
#
# 3 4
# 5 9 2 6
# 6 2 4 3
# 1 2 8 7
#
# Sample Output 1:
#
# 1 2 8 7
# 6 2 4 3
# 5 9 2 6

a = []
n, m = map(int, input().split())  # n-строка, m - столбец

for i in range(n):
    a.append(list(map(int, input().split())))  # заполняем таблицу элементами

for i in range(n)[::-1]:  # обход строки снизу или можно range(n - 1, -1, -1)
    for j in range(m):  # обход столбцов итой строки
        print(a[i][j], end =' ')  # печать символа через пробел
    print()  # пустой принт переход на новую строку

# Красивая матрица
# Перед Вами матрица размера 5х5,
# состоящая из 24-x нулей и единственной единицы. Строки матрицы пронумеруем числами от 1 до 5
# сверху вниз, столбцы матрицы пронумеруем числами от 1 до 5 слева направо.
# За один ход разрешается применить к матрице одно из двух следующих преобразований:
#
# Поменять местами две соседние строки матрицы, то есть строки с номерами i и i+1 для
# некоторого целого i (1 ≤ i < 5).
# Поменять местами два соседних столбца матрицы, то есть столбцы с номерами j и j+1
# для некоторого целого j (1 ≤ j < 5).
# Вы считаете, что матрица будет выглядеть красиво, если единственная единица этой матрицы
# будет находиться в ее центре (в клетке, которая находится на пересечении третьей строки и третьего столбца). Посчитайте, какое минимальное количество ходов потребуется, чтобы сделать матрицу красивой.
#
# Входные данные
# Входные данные состоят из пяти строк, в каждой из которых записаны пять целых чисел:
# j-ое число в i-ой строке входных данных обозначает элемент матрицы, стоящий на пересечении
# i-ой строки и j-ого столбца. Гарантируется, что матрица состоит из 24-x нулей и единственной
# единицы.
# Выходные данные
# Выведите единственное целое число — минимальное количество действий, которое требуется,
# чтобы сделать матрицу красивой.

mas = []
for i in range(5):
    mas.append(list(map(int,input().split())))

for i in range(5):
    for j in range(5):
        if mas[i][j] == 1:
            row = i
            column = j
            
print(abs(2 - row) + abs(2-column))


# В метании молота состязается n спортcменов. Каждый из них сделал m бросков.
# Победителем соревнований объявляется тот спортсмен, у которого максимален наилучший
# результат по всем броскам. Таким образом, программа должна найти значение максимального
# элемента в данном массиве, а также его индексы (то есть номер спортсмена и номер попытки).
#
# Входные данные
#
# Программа получает на вход два числа n и m, являющиеся числом строк и столбцов в массиве.
# Далее во входном потоке идет n строк по m чисел, являющихся элементами массива.
#
# Выходные данные
#
# Программа выводит значение максимального элемента, затем номер строки и номер столбца,
# в котором он встречается. Если в массиве несколько максимальных элементов, то нужно вывести
# минимальный номер строки, в которой встречается такой элемент, а если в этой строке таких
# элементов несколько, то нужно вывести минимальный номер столбца. Не забудьте, что все строки
# и столбцы нумеруются с 0.

n, m = map(int,input().split())
a = []

for i in range(n):
    row = list(map(int, input().split()))
    a.append(row)

maximum = 0
i_max = 0
j_max = 0

for i in range(n):
    for j in range(m):
        if a[i][j] > maximum:
            maximum = a[i][j] #max значение матрицы
            i_max = i # индексы
            j_max = j # индексы
print(maximum)
print(i_max, j_max)

