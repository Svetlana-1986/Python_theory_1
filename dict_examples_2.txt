1. Подсчет количества объектов
Словари часто применяются для подсчёта количества различных объектов. В таких задачах ключами словаря становятся объекты подсчёта, а значениями — их количество.

Например, давайте подсчитаем, сколько раз каждая буква встречается в строке.

s = input('Введите строку! Подсчитаем ее буквы: ')
counter = {}
for letter in s:
    if letter in counter:
        counter[letter] += 1
    else:
        counter[letter] = 1
print(counter)
for letter, count in counter.items():
    print(letter, count)
Алгоритм этой программы работает следующим образом:

 1️⃣   Считываем введенную строку s и проходим по каждому символу ее символу;

 2️⃣  Если символ уже есть в словаре (if letter in counter), увеличиваем его значение на 1;

 3️⃣  Если символа нет, добавляем его как новый ключ и присваиваем значение 1 (так как это первое появление символа). Если не проверить на наличие символа, столкнетесь с ошибкой KeyError;

 4️⃣  После завершения цикла выводим словарь и количество появление каждого символа.

Этот алгоритм можно оптимизировать. Можно упростить проверку и добавление символов в словарь, заменив конструкцию:

    if letter in counter:
        counter[letter] += 1
    else:
        counter[letter] = 1
на:

counter[letter] = counter.get(letter, 0) + 1
Метод get не вызывает исключения KeyError , если ключ по которому идет обращения отсутствует в словаре. Он возвращает значение по умолчанию, в нашем случае число 0, обозначающее что до этого момента данная буква еще не встречалась в подсчетах.

И по заданию нам нужно были подсчитать только буквы, а наша программа подсчитывает абсолютно все символы входной строки.  Добавим проверку с помощью метода .isalpha() , которая позволит игнорировать символы, которые не являются буквами.

В итоге получим такой код:

s = input('Введите строку! Подсчитаем ее буквы: ')
counter = {}
for letter in s:
    if letter.isalpha():
        counter[letter] = counter.get(letter, 0) + 1

for letter, count in counter.items():
    print(letter, count)

2. Словари помогают установить соответствие между объектами
Одним из ключевых применений словарей является хранение пар «ключ:значение». Это позволяет устанавливать соответствие между объектами, что делает словари удобным инструментом для задач, где необходимо быстро находить значение по известному ключу.

Рассмотрим пример: создадим программу, которая связывает английские слова с их переводами на русский язык.

words = {}
while True:
    word = input('Введите английское слово: ')
    if word in words:
        print("Слово", s, 'переводится как', words[word])
    else:
        print("Введите перевод слова", word)
        words[word] = input()

Как работает программа:

     1️⃣  В начале программы создаётся пустой словарь words, который будет хранить пары «английское слово: перевод».

     2️⃣  Пользователь вводит английское слово. Если слово уже есть в словаре, программа выводит его перевод;

     3️⃣  Если слова нет в словаре:

            ➖  программа запрашивает у пользователя перевод;

            ➖  введённое слово добавляется в словарь как ключ, а перевод становится значением.

Пример работы программы:

Введите английское слово: apple
Введите перевод слова apple
Перевод: яблоко
Введите английское слово: apple
Слово apple переводится как яблоко
Данная программа работает бесконечно и никогда не завершится. Можно дополнительно добавить условие на выход из цикла:

words = {}
while True:
    word = input('Введите английское слово (или "exit" для выхода): ')
    if word.lower() == "exit":  # Условие выхода из программы
        break
    if word in words:
        print("Слово", word, "переводится как", words[word])
    else:
        print("Введите перевод слова", word)
        words[word] = input("Перевод: ")
Если пользователь введет слово «exit», используя буквы в любом регистре, цикл завершится.

3. Хранение данных об объектах
Словари в Python позволяют удобно хранить и структурировать данные. Один из популярных случаев использования словарей — хранение информации об объектах. Рассмотрим пример вложенного словаря, содержащего данные об известных людях:

contacts = {
    'John Kennedy': {
        'birthday': '29 may 1917', 'city': 'Brookline',
        'phone': None, 'children': 3
    },
    'Arnold Schwarzenegger': {
        'birthday': '30 july 1947', 'city': 'Gradec',
        'phone': '555-555-555', 'children': 5
    },
    'Donald John Trump': {
        'birthday': '14 july 1946', 'city': 'New York',
        'phone': '777-777-777', 'children': 4
    }
}
В словаре contacts :

    🔘   ключами являются имена людей;

    🔘   значениями являются вложенные словари, содержащие информацию о каждом человеке: дату рождения, город, номер телефона и количество детей.

Такие словари нередко требуется обходить с целью извлечения или обработки данных. Давайте сперва обойдем словарь и выведем всю информацию

persons = list(contacts.keys())
print(persons)  # ['John Kennedy', 'Arnold Schwarzenegger', 'Donald John Trump']

for person in persons:
    print(person, contacts[person])
    print('-' * 15)
 Результатом такой программы будет следующий вывод:

['John Kennedy', 'Arnold Schwarzenegger', 'Donald John Trump']

John Kennedy {'birthday': '29 May 1917', 'city': 'Brookline', 'phone': None, 'children': 3}
---------------
Arnold Schwarzenegger {'birthday': '30 July 1947', 'city': 'Gradec', 'phone': '555-555-555', 'children': 5}
---------------
Donald John Trump {'birthday': '14 July 1946', 'city': 'New York', 'phone': '777-777-777', 'children': 4}
Для каждого человека contacts[person] выводит целиком всю информацию, но мы можем извлекать конкретные данные, 
например, вывести только дату рождения. Для этого нужно использовать двойное взятие по ключу:

for person in persons:
    print(person, contacts[person]['birthday'])
Результат:

John Kennedy 29 May 1917
Arnold Schwarzenegger 30 July 1947
Donald John Trump 14 July 1946


Можем извлечь все данные для каждого человека и поместить их в отдельные переменные:

for person in contacts.keys():
    birthday = contacts[person]['birthday']
    city = contacts[person]['city']
    phone = contacts[person]['phone']
    children = contacts[person]['children']
    print(f"{person}: {city}, {birthday}, {phone}, {children} children")
Вот что увидим в выводе:

John Kennedy: Brookline, 29 May 1917, None, 3 children
Arnold Schwarzenegger: Gradec, 30 July 1947, 555-555-555, 5 children
Donald John Trump: New York, 14 July 1946, 777-777-777, 4 children

4. Использование вложенного цикла
Помимо двойного обращения по ключу мы можем использовать вложенный цикл для получения доступа к данным о человеке. 

for person in contacts.keys():
    print('-' * 15)
    print(person)
    for key, value in contacts[person].items():
        print(f"{key}: {value}")
Вот каким будет вывод данной программы:

---------------
John Kennedy
birthday: 29 May 1917
city: Brookline
phone: None
children: 3
---------------
Arnold Schwarzenegger
birthday: 30 July 1947
city: Gradec
phone: 555-555-555
children: 5
---------------
Donald John Trump
birthday: 14 July 1946
city: New York
phone: 777-777-777
children: 4

5. Дополнительные действия над структурой
Помимо извлечения данных из рассмотренной выше структуры могут пригодится еще некоторые действия, например:

   1️⃣ Добавление новых записей. Для этого по новому ключу нужно присвоить словарь с данными

contacts['Elon Musk'] = {
    'birthday': '28 June 1971',
    'city': 'Pretoria',
    'phone': '123-456-789',
    'children': 10
}
   2️⃣ Удаление записей. Для этого нужно воспользоваться оператором del и указать ключ для удаления:

del contacts['Donald John Trump']
   3️⃣ Проверка наличия ключа. Перед обращением к ключу стоит проверить, существует ли он:

if 'John Kennedy' in contacts:
    print("Контакт существует")

6. Напишите генератор словаря, где ключи — числа от 1 до n, а значения:
«even», если число чётное;
«odd», если число нечётное.
Само число n поступает на вход программе. В качестве ответа выведите получившийся слловарь.

n = int(input())

even_odd_dict = {i: ('even' if i % 2 == 0 else 'odd') for i in range(1, n + 1)}
print(even_odd_dict)