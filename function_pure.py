Чистая функция

# Чистая функция («Pure function») — это функция, которая каждый раз выдает один и тот же результат при одном и том же
# наборе входных данных. Важно отметить, что эти функции не производят побочных эффектов, то есть они не изменяют
# какое-либо состояние вне функции и не полагаются на изменяющиеся данные.

# Чистая функция должна обладать следующими особенностями:
# Находить и возвращать значение, основанное только на переданных аргументах, а не на каком-либо другом внешнем состоянии.
# Не изменять свои аргументы или глобальные переменные, т. е. не оказывать каких-либо побочных эффектов.
# Для одного и того же набора входных параметров всегда должна выдавать один и тот же результат.
#
# В Python побочным эффектом («Side effect») является любое изменение, которое функция вносит в свое состояние или
# глобальное состояние программы, помимо возвращаемого значения. Побочные эффекты могут включать изменение глобальной
# переменной, изменение исходного объекта, создание вывода на консоль или запись в файл или базу данных. Вот типичный
# пример побочного эффекта

# пример нечистой функции
def get_squares(values):
    for i, x in enumerate(values):
        values[i] = x ** 2
    return values


rg = list(range(5))
print(f'{rg=}')  # rg=[0, 1, 2, 3, 4]
print('Результат функции', get_squares(rg))  # [0, 1, 4, 9, 16]
print(f'{rg=}')  # rg=[0, 1, 4, 9, 16]

# Чтобы избавиться от побочных действий, мы можем сделать две вещи. Первое - передавать не оригинальный список,
# а его копию.

def get_squares(values):
    for i, x in enumerate(values):
        values[i] = x ** 2
    return values


rg = list(range(5))
print(f'{rg=}')  # rg=[0, 1, 2, 3, 4]
print('Результат функции', get_squares(rg.copy())) # Передаем копию rg
print(f'{rg=}')  # rg=[0, 1, 2, 3, 4]

Второй способ - создать чистую функцию, в которой мы будем создавать отдельный список для накопления результата.

def get_squares(values):
    sqs = [x ** 2 for x in values]
    return sqs


rg = list(range(5))
print(f'{rg=}')  # rg=[0, 1, 2, 3, 4]
print('Результат функции', get_squares(rg))  # [0, 1, 4, 9, 16]
print(f'{rg=}')  # rg=[0, 1, 2, 3, 4]

# Нечистая функция words_length
# Помните функцию words_length, которая по входному списку слов создавала список длины соответствующих слов и
# возвращала его в качестве результата? Одна из возможных реализаций этой функции представлена ниже
#
# def words_length(words):
#     return [len(word) for word in words]
# Здесь функция words_length является чистой. Ваша задача переписать ее так, чтобы она начала изменять входной список:
# вместо слов должна подставляться его длина. В качестве результата новая words_length должна вернуть None

def words_length(words):
    for i, n in enumerate(words):
        words[i] = len(n)

words = ['Python', 'is', 'awesome!']
result = words_length(words)
print(words)
print(result)
