1.  Метод split является методом строки и имеет следующий шаблон вызова  S.split(sep=None, maxsplit=-1)

Метод .split выполняет разбиение исходной строки S на подстроки по разделителю sep и возвращает их в виде списка. 
По умолчанию разделитель sep равен пробелу.

Глагол split можно перевести как «расколоть», «расщепить», но наиболее подходящий вариант перевода для нас это  «разбивать». 
Он позволяет разбить строку на несколько маленьких строк и создать из них один список.

name = 'Иванов Иван Иванович'
print(name.split())  # ['Иванов', 'Иван', 'Иванович']

fruits = 'Apple Banana Cherry Orange'
fruits = fruits.split()
print(fruits)  # ['Apple', 'Banana', 'Cherry', 'Orange']

print('a b C d e'.split())  # ['a', 'b', 'C', 'd', 'e']

Параметр sep
В методе split имеется необязательный параметр sep, который отвечает за знак разделителя. По умолчанию он равен пробелу, но вы можете задать ему
 другое значение. В примере ниже в строке guests имена разделены запятыми. Следовательно, чтобы получить каждое имя отдельно нам нужно разбить
 данную строку по символу , 


guests = "Алиса,Боб,Чарли,Денис,Ева"

# Разделяем строку на отдельные имена
guest_list = guests.split(',')
print(guest_list)  # ['Алиса', 'Боб', 'Чарли', 'Денис', 'Ева']

Когда параметр sep будет задан, то следующие друг за другом разделители не воспринимаются как один и считаются разделителями пустых строк. 
В примере ниже первый вызов метода split воспринимает 3 стоящих пробела между цифрами как один, поэтому в итоговом списке нет никаких дополнительных 
элементов. Второй же вызов происходит не от дефолтного разделителя запятой, поэтому учитывается каждый знак , 

print('1   2   3   4   5'.split())  # ['1', '2', '3', '4', '5']

print('1,,2,,3,,4,,5'.split(','))  # ['1', '', '2', '', '3', '', '4', '', '5']

Если параметр sep не указан, то последовательные пробелы объединяются вместе и вообще исключаются из разбиений. 
А если строка состоит только из пробелов или является пустой, то результатом разделения по пробелу будет пустой список.

print('1, 2, 3, 4, 5'.split(', '))  # ['1', '2', '3', '4', '5']
print('a->b->C->->d'.split('->'))  # ['a', 'b', 'C', '', 'd']
print('1      4      5'.split())  # ['1', '4', '5']
print('   a  b   c   '.split())  # ['a', 'b', 'c']
print('    '.split())  # []
print('www'.split('w'))  # ['', '', '', '']


Параметр maxsplit 
Мы можем использовать параметр maxsplit метода .split для ограничения количества разбиений строки. 

fruits = 'Apple#Banana#Cherry#Orange'

# без ограничений
print(fruits.split('#'))  # ['Apple', 'Banana', 'Cherry', 'Orange']

# лимит в одно разбиение
print(fruits.split('#', 1))  # ['Apple', 'Banana#Cherry#Orange']

# лимит в два разбиения
print(fruits.split('#', 2))  # ['Apple', 'Banana', 'Cherry#Orange']

# запрет разбиений
print(fruits.split('#', 0))  # ['Apple#Banana#Cherry#Orange']



2. Метод join   является методом строки и имеет следующий шаблон вызова:

строка_соединитель.join(iterable)


Значит, метод .join объединяет элементы переданного списка или строки с помощью «соединителя».  Вначале вы пишете строку-соединитель, затем ставите точку и вызываете метод  .join. В скобках указываете переменную, в которой у вас хранится список или другая строка.

Вот пример работы метода join со списком

print(' '.join(['Иванов', 'Иван', 'Иванович']))  # Иванов Иван Иванович
print('#'.join(['Apple', 'Banana', 'Cherry']))  # Apple#Banana#Cherry
print(''.join(['Алиса', 'Боб', 'Чарли', 'Денис', 'Ева']))  # АлисаБобЧарлиДенисЕва
print(','.join(['Алиса', 'Боб', 'Чарли', 'Денис', 'Ева']))  # Алиса,Боб,Чарли,Денис,Ева
print('->'.join(['Алиса', 'Боб', 'Денис', 'Ева']))  # Алиса->Боб->Денис->Ева

Вот что будет, если передавать строку:
print('!'.join('Алиса'))  # А!л!и!с!а
print('???'.join('1 2 3'))  # 1??? ???2??? ???3


Но метод join умеет объединять в одну строку только строковые элементы. Это значит, что нельзя в него передавать коллекцию не из строк, 
иначе возникнет исключение

TypeError: sequence item 0: expected str instance, int found

Итоги
Мы изучили два метода, которые позволяют выполнять операцию преобразования типа из строки в список и наоборот.

fruits = 'Apple Banana Cherry Orange'
words = fruits.split()
print(words)  # ['Apple', 'Banana', 'Cherry', 'Orange']
new_fruit = ','.join(words)
print(new_fruit)  # Apple,Banana,Cherry,Orange
print('!'.join(words))  # Apple!Banana!Cherry!Orange
print(' '.join(words))  # Apple Banana Cherry Orange






















