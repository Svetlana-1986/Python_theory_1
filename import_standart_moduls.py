# Тот файлик, в котором вы пишете код на python называется модулем. У такого файла расширение .py.
# Также у каждого модуля есть несколько основных атрибутов:
#
# имя модуля. У любого файла есть имя, модуль здесь ничем не отличается от других файлов;
# путь до модуля на диске
# пространство имён модуля. В него попадают все имена, которые попадают в глобальную область видимости:
# переменные, функции и т.д.

# from pprint import pprint
#
# def hello(*args):
#     name = "Ivan"
#     print ("hello,", name, *args)
#
# def bye(*args):
#     name = "Ivan"
#     print ("bye,", name, *args)
#
# pprint(locals())

# Он сохранен в файле под названием hello_and_buy.py
#
# Путь файла у каждого свой, у меня он может быть таким: C:\\python\\work\\hello_and_buy.py
#
# В глобальную область видимости попадут имя функций hello и bye, но туда не попадут переменные name,
# расположенные внутри функций.

# Для того, чтобы работать с модулем необходимо знать его название, импортировать его и вызывать необходимую функцию
# внутри модуля. Например, при помощи модуля calendar можем получить текстовое отображение календаря за 2022 год.

# import calendar
#
# c = calendar.TextCalendar()
# print(c.formatyear(2022))

# Также важно понимать, что каждый модуль имеет своё личное пространство имён. Его можно проверить при помощи команды dir.
# Посмотрим на пространство имён модуля math

# import math
#
# print(dir(math))



# Примечания использования импортирования в сочетании с pep8:
#
# Если импортируются целиком несколько модулей, то можно импортировать в одну строку, как здесь:
# import os, random, math
# Но так делать не рекомендуется! Стандарт pep8 предлагает импортировать каждый отдельный модуль на новой строке:
#
# import os
# import random
# import math

# Если из одного модуля импортируется несколько имён, то это можно делать в одной строчке через запятую:
#
# from math import e, pi, factorial
# Не рекомендуется импортировать все имена:
# from math import *
# Так лучше не делать.

# Все импорты должны располагаться в самом вверху модуля, а после них должен идти код.
# Импорт должен быть сгруппирован в следующем порядке:

# Импорт стандартных библиотек
# Импорт установленных пакетов (например django, pandas и т.д.)
# Импорт своих собственных модулей (разберем на следующем уроке)

#Задача
# А вы знаете, что такое «Переменная окружения»? Почитайте самостоятельно, если не встречались
#
# Модуль os позволяет получить доступ ко всем переменным окружения, они хранятся в переменной environ.
#
# environ представляет собой по сути словарь переменных окружения, и нам интересно взглянуть на значение, которое
# хранится под ключом 'HOME', его необходимо вывести на экран


import os
rez = os.getenv("HOME") #используется для получения значения переменной окружения.  если переменная окружения
                        # не существует, метод возвращает None или значение по умолчанию os.getenv(key, default=None)
print(rez)



# Переменные окружения в Python - это переменные, которые устанавливаются в операционной системе и могут быть
# использованы в вашем Python-коде. Они часто используются для хранения конфиденциальной информации, такой как ключи API, пароли и другие настройки, которые не должны быть жестко закодированы в вашем приложении.
#
# К чему относятся переменные окружения
#
# Переменные окружения относятся к настройкам операционной системы и могут быть использованы любыми программами,
# работающими в этой системе. В контексте Python они часто используются для:
#
# Конфигурации приложений: Например, для указания базы данных, к которой нужно подключиться.
# Безопасности: Для хранения конфиденциальной информации, чтобы не включать её в исходный код.
# Управления окружением: Для указания путей к различным ресурсам и инструментам.
# Примеры использования переменных окружения в Python
#
# Установка переменной окружения
#
# Вы можете установить переменную окружения в вашей операционной системе. Например, в Unix-подобных системах это можно
# сделать следующим образом:
#
# export MY_VARIABLE="some_value"
#
# Доступ к переменной окружения в Python
#
# Для доступа к переменной окружения в Python используется модуль os:
#
# import os
#
# my_variable = os.getenv('MY_VARIABLE')
# print(my_variable)  # Выведет: some_value
# Использование переменных окружения для конфигурации
#
# Предположим, у вас есть приложение, которое требует подключения к базе данных. Вы можете использовать переменные
# окружения для хранения конфиденциальной информации, такой как URL базы данных:
#
# import os
# import psycopg2
#
# DATABASE_URL = os.getenv('DATABASE_URL')
#
# conn = psycopg2.connect(DATABASE_URL)
# Заключение
#
# Переменные окружения - это мощный инструмент для управления конфигурацией и безопасностью ваших приложений.
# Они позволяют хранить конфиденциальную информацию вне исходного кода и легко изменять настройки без необходимости
# изменения кода.


# Задача 2

from string import Template


values = {'one': 'Привет', 'copter': 'Квадракоптер'}

t = Template("""
Ну что, мои хорошие, всем $one
Это шаблонная строка
В нее можно вставлять значения по ключам
Хочу сюда вставлю слово $copter, хочу сюда $copter
""")

print(t.substitute(values))

# Задача 3
# Из модуля string импортируйте следующие переменные:
#
# ascii_lowercase - строка, содержащая английский буквы англ. алфавита в нижнем регистре
# ascii_uppercase - строка, содержащая английский буквы англ. алфавита в верхнем регистре
# punctuation - строка, содержащая символы пунктуации
# Необходимо в отдельных строках вывести сперва все знаки пунктуации, затем заглавные символы и уже потом маленькие.

from string import ascii_lowercase as ascii_low, ascii_uppercase as ascii_upper, punctuation as punct

print(punct)
print(ascii_upper)
print(ascii_low)