# Треугольник Паскаля
# Таким образом, треугольник Паскаля представляет собой таблицу биноминальных коэффициентов,
# имеющую форму треугольника. В этом треугольнике на вершине и по бокам стоят единицы.
# Каждое число равно сумме двух расположенных над ним чисел. То есть на втором уровне мы получили 2,
# т.к. над ней расположены 1 и 1 и при их сложении получили 2. Более понятно выглядит данный принцип
# уже на 4 уровне, поскольку: ничего+1=1, 1+3=4, 3+3=6, 3+1=4, 1+ничего=1.
# Как мы уже сказали, это таблица биноминальных коэффициентов, ими называют те значения, которые мы
# получаем в каждом ряду. Они используются в формуле бинома Ньютона. Эта формула позволяет возвести
# сумму двух чисел в любую произвольную степень.

n = int(input('Введите размер матрицы: '))
triangle = []

for i in range(n+1):
    triangle.append([1] + [0]*n)

for i in range(1, n+1): #обходить элементы слева-направо и сверху-вниз, исключая нулевую строку и нулевой столбец
    for j in range(1, n+1):
        triangle[i][j] = triangle[i-1][j] + triangle[i-1][j-1]

for i in range(0, n+1): #отдельным циклом выведем элементы нашего треугольника:
    for j in range(0, n+1):
        print(triangle[i][j], end=" ")
    print()

# Как мы видим, заполнение в нашем коде происходит правильно. Есть только небольшой минус –
# в этом цикле мы обходим все элементы, т.е. мы берём и те нули, которые стоят выше нашей главной
# диагонали. То есть, допустим, берём первый ноль из первого уровня с индексом [1][2] и получаем его
# при помощи складывания нулей, стоящих на позициях [0][2] и [0][1]. За счёт таких операций наша
# программа медленнее работает. Это можно исправить, если во внутреннем цикле, изменяющем значения
# нашего списка, ограничить не до n+1, а до i+1. Таким образом, программа будет доходить только до
# главной диагонали, а следующие за ней значения будут игнорироваться. Итоговый код будем следующим:

n = int(input('Введите размер матрицы: '))
triangle = []

for i in range(n+1):
    triangle.append([1] + [0]*n)

for i in range(1, n+1):
    for j in range(1, i+1):
        triangle[i][j] = triangle[i-1][j] + triangle[i-1][j-1]

for i in range(0, n+1):
    for j in range(0, n+1):
        print(triangle[i][j], end=" ")
    print()

# Как мы видим, наш код всё так же исправно работает, при этом работать он будет быстрее.
# И если хотите убедиться, что лишние элементы не берутся, то в выводе тоже можно изменить n на i
# и получим следующий вывод при вводе 4. Выведется только треуголник Паскаля,
# без 0 после галвной диагонали.

n = int(input('Введите размер матрицы: '))
triangle = []

for i in range(n+1):
    triangle.append([1] + [0]*n)

for i in range(1, n+1):
    for j in range(1, i+1):
        triangle[i][j] = triangle[i-1][j] + triangle[i-1][j-1]

for i in range(0, n+1):
    for j in range(0, i+1):
        print(triangle[i][j], end=" ")
    print()